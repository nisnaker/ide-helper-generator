<?php

/**
 * this file is generated by https://github.com/nisnaker/ide-helper-generator
 *
 *
 * ext info:
 *
 * swoole
 * 
 * swoole support => enabled
 * Version => 2.0.9
 * Author => tianfeng.han[email: mikan.tenny@gmail.com]
 * epoll => enabled
 * eventfd => enabled
 * timerfd => enabled
 * signalfd => enabled
 * spinlock => enabled
 * rwlock => enabled
 * async http/websocket client => enabled
 * Linux Native AIO => enabled
 * pcre => enabled
 * mutex_timedlock => enabled
 * pthread_barrier => enabled
 * 
 * Directive => Local Value => Master Value
 * swoole.aio_thread_num => 2 => 2
 * swoole.display_errors => On => On
 * swoole.use_namespace => On => On
 * swoole.fast_serialize => Off => Off
 * swoole.unixsock_buffer_size => 8388608 => 8388608
 * 
 */


/**
 * ext constants:
 */

defined('SWOOLE_BASE') or define('SWOOLE_BASE', 4);
defined('SWOOLE_THREAD') or define('SWOOLE_THREAD', 2);
defined('SWOOLE_PROCESS') or define('SWOOLE_PROCESS', 3);
defined('SWOOLE_IPC_UNSOCK') or define('SWOOLE_IPC_UNSOCK', 1);
defined('SWOOLE_IPC_MSGQUEUE') or define('SWOOLE_IPC_MSGQUEUE', 2);
defined('SWOOLE_IPC_PREEMPTIVE') or define('SWOOLE_IPC_PREEMPTIVE', 3);
defined('SWOOLE_SOCK_TCP') or define('SWOOLE_SOCK_TCP', 1);
defined('SWOOLE_SOCK_TCP6') or define('SWOOLE_SOCK_TCP6', 3);
defined('SWOOLE_SOCK_UDP') or define('SWOOLE_SOCK_UDP', 2);
defined('SWOOLE_SOCK_UDP6') or define('SWOOLE_SOCK_UDP6', 4);
defined('SWOOLE_SOCK_UNIX_DGRAM') or define('SWOOLE_SOCK_UNIX_DGRAM', 5);
defined('SWOOLE_SOCK_UNIX_STREAM') or define('SWOOLE_SOCK_UNIX_STREAM', 6);
defined('SWOOLE_TCP') or define('SWOOLE_TCP', 1);
defined('SWOOLE_TCP6') or define('SWOOLE_TCP6', 3);
defined('SWOOLE_UDP') or define('SWOOLE_UDP', 2);
defined('SWOOLE_UDP6') or define('SWOOLE_UDP6', 4);
defined('SWOOLE_UNIX_DGRAM') or define('SWOOLE_UNIX_DGRAM', 5);
defined('SWOOLE_UNIX_STREAM') or define('SWOOLE_UNIX_STREAM', 6);
defined('SWOOLE_SOCK_SYNC') or define('SWOOLE_SOCK_SYNC', 0);
defined('SWOOLE_SOCK_ASYNC') or define('SWOOLE_SOCK_ASYNC', 1);
defined('SWOOLE_SYNC') or define('SWOOLE_SYNC', 2048);
defined('SWOOLE_ASYNC') or define('SWOOLE_ASYNC', 1024);
defined('SWOOLE_KEEP') or define('SWOOLE_KEEP', 4096);
defined('SWOOLE_EVENT_READ') or define('SWOOLE_EVENT_READ', 512);
defined('SWOOLE_EVENT_WRITE') or define('SWOOLE_EVENT_WRITE', 1024);
defined('SWOOLE_VERSION') or define('SWOOLE_VERSION', '2.0.9');
defined('SWOOLE_AIO_BASE') or define('SWOOLE_AIO_BASE', 0);
defined('SWOOLE_AIO_LINUX') or define('SWOOLE_AIO_LINUX', 1);
defined('SIGHUP') or define('SIGHUP', 1);
defined('SIGINT') or define('SIGINT', 2);
defined('SIGQUIT') or define('SIGQUIT', 3);
defined('SIGILL') or define('SIGILL', 4);
defined('SIGTRAP') or define('SIGTRAP', 5);
defined('SIGABRT') or define('SIGABRT', 6);
defined('SIGBUS') or define('SIGBUS', 7);
defined('SIGFPE') or define('SIGFPE', 8);
defined('SIGKILL') or define('SIGKILL', 9);
defined('SIGUSR1') or define('SIGUSR1', 10);
defined('SIGSEGV') or define('SIGSEGV', 11);
defined('SIGUSR2') or define('SIGUSR2', 12);
defined('SIGPIPE') or define('SIGPIPE', 13);
defined('SIGALRM') or define('SIGALRM', 14);
defined('SIGTERM') or define('SIGTERM', 15);
defined('SIGSTKFLT') or define('SIGSTKFLT', 16);
defined('SIGCHLD') or define('SIGCHLD', 17);
defined('SIGCONT') or define('SIGCONT', 18);
defined('SIGSTOP') or define('SIGSTOP', 19);
defined('SIGTSTP') or define('SIGTSTP', 20);
defined('SIGTTIN') or define('SIGTTIN', 21);
defined('SIGTTOU') or define('SIGTTOU', 22);
defined('SIGURG') or define('SIGURG', 23);
defined('SIGXCPU') or define('SIGXCPU', 24);
defined('SIGXFSZ') or define('SIGXFSZ', 25);
defined('SIGVTALRM') or define('SIGVTALRM', 26);
defined('SIGPROF') or define('SIGPROF', 27);
defined('SIGWINCH') or define('SIGWINCH', 28);
defined('SIGIO') or define('SIGIO', 29);
defined('SIGPWR') or define('SIGPWR', 30);
defined('SIGSYS') or define('SIGSYS', 31);
defined('SIG_IGN') or define('SIG_IGN', 1);
defined('SWOOLE_FILELOCK') or define('SWOOLE_FILELOCK', 2);
defined('SWOOLE_MUTEX') or define('SWOOLE_MUTEX', 3);
defined('SWOOLE_SEM') or define('SWOOLE_SEM', 4);
defined('SWOOLE_RWLOCK') or define('SWOOLE_RWLOCK', 1);
defined('SWOOLE_SPINLOCK') or define('SWOOLE_SPINLOCK', 5);
defined('WEBSOCKET_OPCODE_TEXT') or define('WEBSOCKET_OPCODE_TEXT', 1);
defined('WEBSOCKET_OPCODE_BINARY') or define('WEBSOCKET_OPCODE_BINARY', 2);
defined('WEBSOCKET_OPCODE_PING') or define('WEBSOCKET_OPCODE_PING', 9);
defined('WEBSOCKET_STATUS_CONNECTION') or define('WEBSOCKET_STATUS_CONNECTION', 1);
defined('WEBSOCKET_STATUS_HANDSHAKE') or define('WEBSOCKET_STATUS_HANDSHAKE', 2);
defined('WEBSOCKET_STATUS_FRAME') or define('WEBSOCKET_STATUS_FRAME', 3);
defined('WEBSOCKET_STATUS_ACTIVE') or define('WEBSOCKET_STATUS_ACTIVE', 3);
defined('SWOOLE_FAST_PACK') or define('SWOOLE_FAST_PACK', 1);


/**
 * ext functions:
 */

function swoole_version () {}
function swoole_cpu_num () {}
function swoole_last_error () {}
function swoole_event_add ($fd, $read_callback, $write_callback, $events) {}
function swoole_event_set ($fd, $read_callback, $write_callback, $events) {}
function swoole_event_del ($fd) {}
function swoole_event_exit () {}
function swoole_event_wait () {}
function swoole_event_write ($fd, $data) {}
function swoole_event_defer ($callback) {}
function swoole_timer_after ($ms, $callback, $param) {}
function swoole_timer_tick ($ms, $callback) {}
function swoole_timer_exists ($timer_id) {}
function swoole_timer_clear ($timer_id) {}
function swoole_async_set (array $settings) {}
function swoole_async_read ($filename, $callback, $chunk_size, $offset) {}
function swoole_async_write ($filename, $content, $offset, $callback) {}
function swoole_async_readfile ($filename, $callback) {}
function swoole_async_writefile ($filename, $content, $callback, $flags) {}
function swoole_async_dns_lookup ($domain_name, $content) {}
function swoole_async_dns_lookup_coro ($domain_name) {}
function swoole_client_select (&$read_array, &$write_array, &$error_array, $timeout) {}
function swoole_select (&$read_array, &$write_array, &$error_array, $timeout) {}
function swoole_set_process_name ($process_name) {}
function swoole_get_local_ip () {}
function swoole_get_local_mac () {}
function swoole_strerror ($errno) {}
function swoole_errno () {}


/**
 * ext classes:
 */

namespace Swoole {
    class Mmap{


        public static function open ($filename, $size, $offset) {}
    }
}

namespace Swoole {
    class Lock{
        const FILELOCK = 2;
        const MUTEX = 3;
        const SEM = 4;
        const RWLOCK = 1;
        const SPINLOCK = 5;


        public function __construct ($type, $filename) {}
        public function __destruct () {}
        public function lock () {}
        public function lockwait ($timeout) {}
        public function trylock () {}
        public function lock_read () {}
        public function trylock_read () {}
        public function unlock () {}
    }
}

namespace Swoole {
    class Timer{


        public static function tick ($ms, $callback, $param) {}
        public static function after ($ms, $callback) {}
        public static function exists ($timer_id) {}
        public static function clear ($timer_id) {}
    }
}

namespace Swoole {
    class Event{


        public static function add ($fd, $read_callback, $write_callback, $events) {}
        public static function del ($fd) {}
        public static function set ($fd, $read_callback, $write_callback, $events) {}
        public static function exit () {}
        public static function write ($fd, $data) {}
        public static function wait () {}
        public static function defer ($callback) {}
    }
}

namespace Swoole {
    class Async{


        public static function read ($filename, $callback, $chunk_size, $offset) {}
        public static function write ($filename, $content, $offset, $callback) {}
        public static function readFile ($filename, $callback) {}
        public static function writeFile ($filename, $content, $callback, $flags) {}
        public static function dnsLookup ($domain_name, $content) {}
        public static function dnsLookupCoro ($domain_name) {}
        public static function set (array $settings) {}
    }
}

namespace Swoole {
    class MySQL{
        const STATE_QUERY = 0;
        const STATE_READ_START = 1;
        const STATE_READ_FIELD  = 2;
        const STATE_READ_ROW = 3;
        const STATE_READ_END = 4;
        const STATE_CLOSED = 5;

        public $serverInfo;
        public $sock;
        public $connected;
        public $errno;
        public $connect_errno;
        public $error;
        public $connect_error;
        public $insert_id;
        public $affected_rows;
        public $onConnect;
        public $onClose;

        public function __construct () {}
        public function __destruct () {}
        public function connect (array $server_config, $callback) {}
        public function begin ($callback) {}
        public function commit ($callback) {}
        public function rollback ($callback) {}
        public function query ($sql, $callback) {}
        public function close () {}
        public function getState () {}
        public function on ($event_name, $callback) {}
    }
}

namespace Swoole {
    class Table{
        const TYPE_INT = 1;
        const TYPE_STRING = 7;
        const TYPE_FLOAT = 6;


        public function __construct ($table_size, $conflict_proportion) {}
        public function column ($name, $type, $size) {}
        public function create () {}
        public function destroy () {}
        public function set ($key, array $value) {}
        public function get ($key, $field) {}
        public function count () {}
        public function del ($key) {}
        public function exist ($key) {}
        public function incr ($key, $column, $incrby) {}
        public function decr ($key, $column, $decrby) {}
        public function getMemorySize () {}
        public function offsetExists ($offset) {}
        public function offsetGet ($offset) {}
        public function offsetSet ($offset, $value) {}
        public function offsetUnset ($offset) {}
        public function rewind () {}
        public function next () {}
        public function current () {}
        public function key () {}
        public function valid () {}
    }
}

namespace Swoole {
    class Server{

        public $onConnect;
        public $onReceive;
        public $onClose;
        public $onPacket;
        public $onBufferFull;
        public $onBufferEmpty;
        public $onStart;
        public $onShutdown;
        public $onWorkerStart;
        public $onWorkerStop;
        public $onWorkerExit;
        public $onWorkerError;
        public $onTask;
        public $onFinish;
        public $onManagerStart;
        public $onManagerStop;
        public $onPipeMessage;
        public $setting;
        public $connections;
        public $host;
        public $port;
        public $type;
        public $mode;
        public $ports;
        public $master_pid;
        public $manager_pid;
        public $worker_id;
        public $taskworker;
        public $worker_pid;

        public function __construct ($host, $port, $mode, $sock_type) {}
        public function __destruct () {}
        public function listen ($host, $port, $sock_type) {}
        public function addlistener ($host, $port, $sock_type) {}
        public function on ($event_name, $callback) {}
        public function set (array $settings) {}
        public function start () {}
        public function send ($fd, $send_data, $reactor_id) {}
        public function sendto ($ip, $port, $send_data, $server_socket) {}
        public function sendwait ($conn_fd, $send_data) {}
        public function exist ($fd) {}
        public function protect ($fd, $is_protected) {}
        public function sendfile ($conn_fd, $filename, $offset, $length) {}
        public function close ($fd, $reset) {}
        public function confirm ($fd) {}
        public function pause ($fd) {}
        public function resume ($fd) {}
        public function task ($data, $worker_id, $finish_callback) {}
        public function taskwait ($data, $timeout, $worker_id) {}
        public function taskWaitMulti (array $tasks, $timeout) {}
        public function taskCo (array $tasks, $timeout) {}
        public function finish ($data) {}
        public function reload () {}
        public function shutdown () {}
        public function stop ($worker_id) {}
        public function getLastError () {}
        public function heartbeat ($reactor_id) {}
        public function connection_info ($fd, $reactor_id) {}
        public function connection_list ($start_fd, $find_count) {}
        public function getClientInfo ($fd, $reactor_id) {}
        public function getClientList ($start_fd, $find_count) {}
        public function after ($ms, $callback, $param) {}
        public function tick ($ms, $callback) {}
        public function clearTimer ($timer_id) {}
        public function defer ($callback) {}
        public function sendMessage ($dst_worker_id, $data) {}
        public function addProcess (swoole_process $process) {}
        public function stats () {}
        public function bind ($fd, $uid) {}
    }
}

namespace Swoole {
    class Buffer{


        public function __construct ($size) {}
        public function __destruct () {}
        public function __toString () {}
        public function substr ($offset, $length, $seek) {}
        public function write ($offset, $data) {}
        public function read ($offset, $length) {}
        public function append ($data) {}
        public function expand ($size) {}
        public function recycle () {}
        public function clear () {}
    }
}

namespace Swoole {
    class Atomic{


        public function __construct ($value) {}
        public function add ($add_value) {}
        public function sub ($sub_value) {}
        public function get () {}
        public function set ($value) {}
        public function wait ($timeout) {}
        public function wakeup ($count) {}
        public function cmpset ($cmp_value, $new_value) {}
    }
}

namespace Swoole {
    class Client{
        const MSG_OOB = 1;
        const MSG_PEEK = 2;
        const MSG_DONTWAIT = 64;
        const MSG_WAITALL = 256;

        public $errCode;
        public $sock;
        public $reuse;
        public $reuseCount;
        public $type;
        public $id;
        public $setting;
        public $onConnect;
        public $onError;
        public $onReceive;
        public $onClose;
        public $onBufferFull;
        public $onBufferEmpty;

        public function __construct ($type, $async) {}
        public function __destruct () {}
        public function set (array $settings) {}
        public function connect ($host, $port, $timeout, $sock_flag) {}
        public function recv ($size, $flag) {}
        public function send ($data, $flag) {}
        public function pipe ($dst_socket) {}
        public function sendfile ($filename, $offset, $length) {}
        public function sendto ($ip, $port, $data) {}
        public function sleep () {}
        public function wakeup () {}
        public function pause () {}
        public function resume () {}
        public function isConnected () {}
        public function getsockname () {}
        public function getpeername () {}
        public function close ($force) {}
        public function on ($event_name, $callback) {}
    }
}

namespace Swoole {
    class Channel{


        public function __construct ($size) {}
        public function __destruct () {}
        public function push ($data) {}
        public function pop () {}
        public function stats () {}
    }
}

namespace Swoole {
    class Process{
        const IPC_NOWAIT = 256;

        public $pipe;
        public $callback;
        public $msgQueueId;
        public $msgQueueKey;
        public $pid;
        public $id;

        public function __construct ($callback, $redirect_stdin_and_stdout, $pipe_type) {}
        public function __destruct () {}
        public static function wait ($blocking) {}
        public static function signal ($signal_no, $callback) {}
        public static function alarm ($usec) {}
        public static function kill ($pid, $signal_no) {}
        public static function daemon ($nochdir, $noclose) {}
        public function useQueue ($key, $mode) {}
        public function statQueue () {}
        public function freeQueue () {}
        public function start () {}
        public function write ($data) {}
        public function close () {}
        public function read ($size) {}
        public function push ($data) {}
        public function pop ($size) {}
        public function exit ($exit_code) {}
        public function exec ($exec_file, $args) {}
        public function name ($process_name) {}
    }
}

namespace Swoole {
    class Coroutine{


        public static function create () {}
        public static function cli_wait () {}
        public static function suspend () {}
        public static function resume () {}
        public static function getuid () {}
        public static function sleep ($seconds) {}
        public static function call_user_func () {}
        public static function call_user_func_array () {}
    }
}

namespace Swoole {
    class Serialize{


        public static function pack ($data, $flag) {}
        public static function unpack ($string, $args) {}
    }
}

namespace Swoole\Table {
    class Row{

        public $key;
        public $value;

        public function offsetExists ($offset) {}
        public function offsetGet ($offset) {}
        public function offsetSet ($offset, $value) {}
        public function offsetUnset ($offset) {}
        public function __destruct () {}
    }
}

namespace Swoole {
    class Exception extends \Exception{

        protected $message;
        protected $code;
        protected $file;
        protected $line;

        public function __construct ($message, $code, $previous) {}
        public function __wakeup () {}
        public function __toString () {}
    }
}

namespace Swoole\Http {
    class Client{

        public $type;
        public $errCode;
        public $sock;
        public $statusCode;
        public $host;
        public $port;
        public $requestMethod;
        public $requestHeaders;
        public $requestBody;
        public $uploadFiles;
        public $set_cookie_headers;
        public $downloadFile;
        public $headers;
        public $cookies;
        public $body;
        public $onConnect;
        public $onError;
        public $onMessage;
        public $onClose;

        public function __construct ($host, $port, $ssl) {}
        public function __destruct () {}
        public function set (array $settings) {}
        public function setMethod ($method) {}
        public function setHeaders (array $headers) {}
        public function setCookies (array $cookies) {}
        public function setData ($data) {}
        public function addFile ($path, $name, $type, $filename, $offset, $length) {}
        public function execute ($path, $callback) {}
        public function push ($data, $opcode, $finish) {}
        public function get ($path, $callback) {}
        public function post ($path, $data, $callback) {}
        public function upgrade ($path, $callback) {}
        public function download ($path, $file, $callback, $offset) {}
        public function isConnected () {}
        public function close () {}
        public function on ($event_name, $callback) {}
    }
}

namespace Swoole\Server {
    class Port{

        public $onConnect;
        public $onReceive;
        public $onClose;
        public $onPacket;
        public $onBufferFull;
        public $onBufferEmpty;
        public $onRequest;
        public $onHandShake;
        public $onMessage;
        public $onOpen;
        public $host;
        public $port;
        public $type;
        public $sock;
        public $setting;

        private function __construct () {}
        public function __destruct () {}
        public function set (array $settings) {}
        public function on ($event_name, $callback) {}
    }
}

namespace Swoole\Http {
    class Server extends \Swoole\Server{

        public $onConnect;
        public $onReceive;
        public $onClose;
        public $onPacket;
        public $onBufferFull;
        public $onBufferEmpty;
        public $onStart;
        public $onShutdown;
        public $onWorkerStart;
        public $onWorkerStop;
        public $onWorkerExit;
        public $onWorkerError;
        public $onTask;
        public $onFinish;
        public $onManagerStart;
        public $onManagerStop;
        public $onPipeMessage;
        public $connections;
        public $host;
        public $port;
        public $type;
        public $mode;
        public $ports;
        public $master_pid;
        public $manager_pid;
        public $worker_id;
        public $taskworker;
        public $worker_pid;
        public $onRequest;
        public $onHandshake;
        public $setting;

        public function on ($event_name, $callback) {}
        public function start () {}
        public function __construct ($host, $port, $mode, $sock_type) {}
        public function __destruct () {}
        public function listen ($host, $port, $sock_type) {}
        public function addlistener ($host, $port, $sock_type) {}
        public function set (array $settings) {}
        public function send ($fd, $send_data, $reactor_id) {}
        public function sendto ($ip, $port, $send_data, $server_socket) {}
        public function sendwait ($conn_fd, $send_data) {}
        public function exist ($fd) {}
        public function protect ($fd, $is_protected) {}
        public function sendfile ($conn_fd, $filename, $offset, $length) {}
        public function close ($fd, $reset) {}
        public function confirm ($fd) {}
        public function pause ($fd) {}
        public function resume ($fd) {}
        public function task ($data, $worker_id, $finish_callback) {}
        public function taskwait ($data, $timeout, $worker_id) {}
        public function taskWaitMulti (array $tasks, $timeout) {}
        public function taskCo (array $tasks, $timeout) {}
        public function finish ($data) {}
        public function reload () {}
        public function shutdown () {}
        public function stop ($worker_id) {}
        public function getLastError () {}
        public function heartbeat ($reactor_id) {}
        public function connection_info ($fd, $reactor_id) {}
        public function connection_list ($start_fd, $find_count) {}
        public function getClientInfo ($fd, $reactor_id) {}
        public function getClientList ($start_fd, $find_count) {}
        public function after ($ms, $callback, $param) {}
        public function tick ($ms, $callback) {}
        public function clearTimer ($timer_id) {}
        public function defer ($callback) {}
        public function sendMessage ($dst_worker_id, $data) {}
        public function addProcess (swoole_process $process) {}
        public function stats () {}
        public function bind ($fd, $uid) {}
    }
}

namespace Swoole\Redis {
    class Server extends \Swoole\Server{
        const NIL = 1;
        const ERROR = 0;
        const STATUS = 2;
        const INT = 3;
        const STRING = 4;
        const SET = 5;
        const MAP = 6;

        public $onConnect;
        public $onReceive;
        public $onClose;
        public $onPacket;
        public $onBufferFull;
        public $onBufferEmpty;
        public $onStart;
        public $onShutdown;
        public $onWorkerStart;
        public $onWorkerStop;
        public $onWorkerExit;
        public $onWorkerError;
        public $onTask;
        public $onFinish;
        public $onManagerStart;
        public $onManagerStop;
        public $onPipeMessage;
        public $setting;
        public $connections;
        public $host;
        public $port;
        public $type;
        public $mode;
        public $ports;
        public $master_pid;
        public $manager_pid;
        public $worker_id;
        public $taskworker;
        public $worker_pid;

        public function start () {}
        public function setHandler ($command, $callback, $number_of_string_param, $type_of_array_param) {}
        public static function format ($type, $value) {}
        public function __construct ($host, $port, $mode, $sock_type) {}
        public function __destruct () {}
        public function listen ($host, $port, $sock_type) {}
        public function addlistener ($host, $port, $sock_type) {}
        public function on ($event_name, $callback) {}
        public function set (array $settings) {}
        public function send ($fd, $send_data, $reactor_id) {}
        public function sendto ($ip, $port, $send_data, $server_socket) {}
        public function sendwait ($conn_fd, $send_data) {}
        public function exist ($fd) {}
        public function protect ($fd, $is_protected) {}
        public function sendfile ($conn_fd, $filename, $offset, $length) {}
        public function close ($fd, $reset) {}
        public function confirm ($fd) {}
        public function pause ($fd) {}
        public function resume ($fd) {}
        public function task ($data, $worker_id, $finish_callback) {}
        public function taskwait ($data, $timeout, $worker_id) {}
        public function taskWaitMulti (array $tasks, $timeout) {}
        public function taskCo (array $tasks, $timeout) {}
        public function finish ($data) {}
        public function reload () {}
        public function shutdown () {}
        public function stop ($worker_id) {}
        public function getLastError () {}
        public function heartbeat ($reactor_id) {}
        public function connection_info ($fd, $reactor_id) {}
        public function connection_list ($start_fd, $find_count) {}
        public function getClientInfo ($fd, $reactor_id) {}
        public function getClientList ($start_fd, $find_count) {}
        public function after ($ms, $callback, $param) {}
        public function tick ($ms, $callback) {}
        public function clearTimer ($timer_id) {}
        public function defer ($callback) {}
        public function sendMessage ($dst_worker_id, $data) {}
        public function addProcess (swoole_process $process) {}
        public function stats () {}
        public function bind ($fd, $uid) {}
    }
}

namespace Swoole\Http {
    class Request{

        public $fd;
        public $header;
        public $server;
        public $request;
        public $cookie;
        public $get;
        public $files;
        public $post;
        public $tmpfiles;

        public function rawcontent () {}
        public function __destruct () {}
    }
}

namespace Swoole\Http {
    class Response{

        public $fd;
        public $header;
        public $cookie;
        public $trailer;

        public function initHeader () {}
        public function cookie ($name, $value, $expires, $path, $domain, $secure, $httponly) {}
        public function rawcookie ($name, $value, $expires, $path, $domain, $secure, $httponly) {}
        public function status ($http_code) {}
        public function header ($key, $value, $ucwords) {}
        public function write ($content) {}
        public function end ($content) {}
        public function sendfile ($filename, $offset, $length) {}
        public function __destruct () {}
    }
}

namespace Swoole\Coroutine {
    class MySQL{

        private $serverInfo;
        public $sock;
        public $connected;
        public $connect_error;
        public $connect_errno;
        public $affected_rows;
        public $insert_id;
        public $error;
        public $errno;

        public function __construct () {}
        public function __destruct () {}
        public function connect (array $server_config) {}
        public function query ($sql, $timeout) {}
        public function recv () {}
        public function setDefer ($defer) {}
        public function getDefer () {}
        public function close () {}
    }
}

namespace Swoole\MySQL {
    class Exception extends \Exception{

        protected $message;
        protected $code;
        protected $file;
        protected $line;

        public function __construct ($message, $code, $previous) {}
        public function __wakeup () {}
        public function __toString () {}
    }
}

namespace Swoole\WebSocket {
    class Frame{


    }
}

namespace Swoole\WebSocket {
    class Server extends \Swoole\Http\Server{

        public $onConnect;
        public $onReceive;
        public $onClose;
        public $onPacket;
        public $onBufferFull;
        public $onBufferEmpty;
        public $onStart;
        public $onShutdown;
        public $onWorkerStart;
        public $onWorkerStop;
        public $onWorkerExit;
        public $onWorkerError;
        public $onTask;
        public $onFinish;
        public $onManagerStart;
        public $onManagerStop;
        public $onPipeMessage;
        public $connections;
        public $host;
        public $port;
        public $type;
        public $mode;
        public $ports;
        public $master_pid;
        public $manager_pid;
        public $worker_id;
        public $taskworker;
        public $worker_pid;
        public $onRequest;
        public $onHandshake;
        public $setting;

        public function on ($event_name, $callback) {}
        public function push ($fd, $data, $opcode, $finish) {}
        public function exist ($fd) {}
        public static function pack ($data, $opcode, $finish, $mask) {}
        public static function unpack ($data) {}
        public function start () {}
        public function __construct ($host, $port, $mode, $sock_type) {}
        public function __destruct () {}
        public function listen ($host, $port, $sock_type) {}
        public function addlistener ($host, $port, $sock_type) {}
        public function set (array $settings) {}
        public function send ($fd, $send_data, $reactor_id) {}
        public function sendto ($ip, $port, $send_data, $server_socket) {}
        public function sendwait ($conn_fd, $send_data) {}
        public function protect ($fd, $is_protected) {}
        public function sendfile ($conn_fd, $filename, $offset, $length) {}
        public function close ($fd, $reset) {}
        public function confirm ($fd) {}
        public function pause ($fd) {}
        public function resume ($fd) {}
        public function task ($data, $worker_id, $finish_callback) {}
        public function taskwait ($data, $timeout, $worker_id) {}
        public function taskWaitMulti (array $tasks, $timeout) {}
        public function taskCo (array $tasks, $timeout) {}
        public function finish ($data) {}
        public function reload () {}
        public function shutdown () {}
        public function stop ($worker_id) {}
        public function getLastError () {}
        public function heartbeat ($reactor_id) {}
        public function connection_info ($fd, $reactor_id) {}
        public function connection_list ($start_fd, $find_count) {}
        public function getClientInfo ($fd, $reactor_id) {}
        public function getClientList ($start_fd, $find_count) {}
        public function after ($ms, $callback, $param) {}
        public function tick ($ms, $callback) {}
        public function clearTimer ($timer_id) {}
        public function defer ($callback) {}
        public function sendMessage ($dst_worker_id, $data) {}
        public function addProcess (swoole_process $process) {}
        public function stats () {}
        public function bind ($fd, $uid) {}
    }
}

namespace Swoole\Coroutine {
    class Client{
        const MSG_OOB = 1;
        const MSG_PEEK = 2;
        const MSG_DONTWAIT = 64;
        const MSG_WAITALL = 256;

        public $errCode;
        public $sock;

        public function __construct ($type) {}
        public function __destruct () {}
        public function set (array $settings) {}
        public function connect ($host, $port, $timeout) {}
        public function recv () {}
        public function send ($data, $flag) {}
        public function sendfile ($filename, $offset, $length) {}
        public function sendto ($ip, $port, $data) {}
        public function isConnected () {}
        public function getsockname () {}
        public function getpeername () {}
        public function close () {}
    }
}

namespace Swoole\Connection {
    class Iterator{


        public function rewind () {}
        public function next () {}
        public function current () {}
        public function key () {}
        public function valid () {}
        public function count () {}
        public function offsetExists ($fd) {}
        public function offsetGet ($fd) {}
        public function offsetSet ($fd, $value) {}
        public function offsetUnset ($fd) {}
    }
}

namespace Swoole\Coroutine\Http {
    class Client{

        public $errCode;
        public $sock;

        public function __construct () {}
        public function __destruct () {}
        public function set () {}
        public function setMethod () {}
        public function setHeaders () {}
        public function setCookies () {}
        public function setData () {}
        public function execute () {}
        public function get () {}
        public function post () {}
        public function addFile () {}
        public function isConnected () {}
        public function close () {}
        public function setDefer () {}
        public function getDefer () {}
        public function recv () {}
    }
}

namespace Swoole\Coroutine\MySQL {
    class Exception extends \Exception{

        protected $message;
        protected $code;
        protected $file;
        protected $line;

        public function __construct ($message, $code, $previous) {}
        public function __wakeup () {}
        public function __toString () {}
    }
}

namespace { class swoole_lock extends Swoole\Lock {}}
namespace { class swoole_mmap extends Swoole\Mmap {}}
namespace { class swoole_timer extends Swoole\Timer {}}
namespace { class swoole_event extends Swoole\Event {}}
namespace { class swoole_async extends Swoole\Async {}}
namespace { class swoole_mysql extends Swoole\MySQL {}}
namespace { class swoole_table extends Swoole\Table {}}
namespace { class swoole_client extends Swoole\Client {}}
namespace { class swoole_buffer extends Swoole\Buffer {}}
namespace { class swoole_server extends Swoole\Server {}}
namespace { class swoole_atomic extends Swoole\Atomic {}}
namespace { class swoole_channel extends Swoole\Channel {}}
namespace { class swoole_process extends Swoole\Process {}}
namespace { class swoole_exception extends Swoole\Exception {}}
namespace { class swoole_coroutine extends Swoole\Coroutine {}}
namespace { class swoole_serialize extends Swoole\Serialize {}}
namespace { class swoole_table_row extends Swoole\Table\Row {}}
namespace { class swoole_client_coro extends Swoole\Coroutine\Client {}}
namespace { class swoole_http_server extends Swoole\Http\Server {}}
namespace { class swoole_http_client extends Swoole\Http\Client {}}
namespace { class swoole_server_port extends Swoole\Server\Port {}}
namespace { class swoole_http_request extends Swoole\Http\Request {}}
namespace { class swoole_redis_server extends Swoole\Redis\Server {}}
namespace { class swoole_http_response extends Swoole\Http\Response {}}
namespace { class swoole_websocket_frame extends Swoole\WebSocket\Frame {}}
namespace { class swoole_mysql_exception extends Swoole\MySQL\Exception {}}
namespace { class swoole_websocket_server extends Swoole\WebSocket\Server {}}
namespace { class swoole_connection_iterator extends Swoole\Connection\Iterator {}}
namespace { class swoole_http_client_coro extends Swoole\Coroutine\Http\Client {}}


