<?php

/**
 * this file is generated by https://github.com/nisnaker/ide-helper-generator
 *
 *
 * ext info:
 *
 * redis
 * 
 * Redis Support => enabled
 * Redis Version => 5.1.1
 * Available serializers => php, json, igbinary
 * 
 * Directive => Local Value => Master Value
 * redis.arrays.algorithm => no value => no value
 * redis.arrays.auth => no value => no value
 * redis.arrays.autorehash => 0 => 0
 * redis.arrays.connecttimeout => 0 => 0
 * redis.arrays.distributor => no value => no value
 * redis.arrays.functions => no value => no value
 * redis.arrays.hosts => no value => no value
 * redis.arrays.index => 0 => 0
 * redis.arrays.lazyconnect => 0 => 0
 * redis.arrays.names => no value => no value
 * redis.arrays.pconnect => 0 => 0
 * redis.arrays.previous => no value => no value
 * redis.arrays.readtimeout => 0 => 0
 * redis.arrays.retryinterval => 0 => 0
 * redis.arrays.consistent => 0 => 0
 * redis.clusters.cache_slots => 0 => 0
 * redis.clusters.auth => no value => no value
 * redis.clusters.persistent => 0 => 0
 * redis.clusters.read_timeout => 0 => 0
 * redis.clusters.seeds => no value => no value
 * redis.clusters.timeout => 0 => 0
 * redis.pconnect.pooling_enabled => 1 => 1
 * redis.pconnect.connection_limit => 0 => 0
 * redis.session.locking_enabled => 0 => 0
 * redis.session.lock_expire => 0 => 0
 * redis.session.lock_retries => 10 => 10
 * redis.session.lock_wait_time => 2000 => 2000
 * 
 */


/**
 * ext constants:
 */



/**
 * ext functions:
 */



/**
 * ext classes:
 */

namespace  {
    class Redis {
        const REDIS_NOT_FOUND = 0;
        const REDIS_STRING = 1;
        const REDIS_SET = 2;
        const REDIS_LIST = 3;
        const REDIS_ZSET = 4;
        const REDIS_HASH = 5;
        const REDIS_STREAM = 6;
        const PIPELINE = 2;
        const ATOMIC = 0;
        const MULTI = 1;
        const OPT_SERIALIZER = 1;
        const OPT_PREFIX = 2;
        const OPT_READ_TIMEOUT = 3;
        const OPT_TCP_KEEPALIVE = 6;
        const OPT_COMPRESSION = 7;
        const OPT_REPLY_LITERAL = 8;
        const OPT_COMPRESSION_LEVEL = 9;
        const SERIALIZER_NONE = 0;
        const SERIALIZER_PHP = 1;
        const SERIALIZER_IGBINARY = 2;
        const SERIALIZER_JSON = 4;
        const COMPRESSION_NONE = 0;
        const OPT_SCAN = 4;
        const SCAN_RETRY = 1;
        const SCAN_NORETRY = 0;
        const AFTER = 'after';
        const BEFORE = 'before';

        /**
         * @return mixed
         */
        public function __construct () {}

        /**
         * @return mixed
         */
        public function __destruct () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function _prefix ($key) {}

        /**
         * @param  $value
         * @return mixed
         */
        public function _serialize ($value) {}

        /**
         * @param  $value
         * @return mixed
         */
        public function _unserialize ($value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function append ($key, $value) {}

        /**
         * @param  $password
         * @return mixed
         */
        public function auth ($password) {}

        /**
         * @return mixed
         */
        public function bgSave () {}

        /**
         * @return mixed
         */
        public function bgrewriteaof () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function bitcount ($key) {}

        /**
         * @param  $operation
         * @param  $ret_key
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function bitop ($operation, $ret_key, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $bit
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function bitpos ($key, $bit, $start = NULL, $end = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function blPop ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function brPop ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $src
         * @param  $dst
         * @param  $timeout
         * @return mixed
         */
        public function brpoplpush ($src, $dst, $timeout) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function bzPopMax ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function bzPopMin ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @return mixed
         */
        public function clearLastError () {}

        /**
         * @param  $cmd
         * @param  $args
         * @return mixed
         */
        public function client ($cmd, $args = NULL) {}

        /**
         * @return mixed
         */
        public function close () {}

        /**
         * @param  $args
         * @return mixed
         */
        public function command ($args = NULL) {}

        /**
         * @param  $cmd
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function config ($cmd, $key, $value = NULL) {}

        /**
         * @param  $host
         * @param  $port
         * @param  $timeout
         * @param  $retry_interval
         * @return mixed
         */
        public function connect ($host, $port = NULL, $timeout = NULL, $retry_interval = NULL) {}

        /**
         * @return mixed
         */
        public function dbSize () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function debug ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function decr ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function decrBy ($key, $value) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function del ($key, $other_keys = NULL) {}

        /**
         * @return mixed
         */
        public function discard () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function dump ($key) {}

        /**
         * @param  $msg
         * @return mixed
         */
        public function echo ($msg) {}

        /**
         * @param  $script
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function eval ($script, $args = NULL, $num_keys = NULL) {}

        /**
         * @param  $script_sha
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function evalsha ($script_sha, $args = NULL, $num_keys = NULL) {}

        /**
         * @return mixed
         */
        public function exec () {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function exists ($key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $timeout
         * @return mixed
         */
        public function expire ($key, $timeout) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function expireAt ($key, $timestamp) {}

        /**
         * @param  $async
         * @return mixed
         */
        public function flushAll ($async = NULL) {}

        /**
         * @param  $async
         * @return mixed
         */
        public function flushDB ($async = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lat
         * @param  $member
         * @param  $other_triples
         * @return mixed
         */
        public function geoadd ($key, $lng, $lat, $member, $other_triples = NULL) {}

        /**
         * @param  $key
         * @param  $src
         * @param  $dst
         * @param  $unit
         * @return mixed
         */
        public function geodist ($key, $src, $dst, $unit = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function geohash ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function geopos ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lan
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadius ($key, $lng, $lan, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lan
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadius_ro ($key, $lng, $lan, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadiusbymember ($key, $member, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadiusbymember_ro ($key, $member, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function get ($key) {}

        /**
         * @return mixed
         */
        public function getAuth () {}

        /**
         * @param  $key
         * @param  $offset
         * @return mixed
         */
        public function getBit ($key, $offset) {}

        /**
         * @return mixed
         */
        public function getDBNum () {}

        /**
         * @return mixed
         */
        public function getHost () {}

        /**
         * @return mixed
         */
        public function getLastError () {}

        /**
         * @return mixed
         */
        public function getMode () {}

        /**
         * @param  $option
         * @return mixed
         */
        public function getOption ($option) {}

        /**
         * @return mixed
         */
        public function getPersistentID () {}

        /**
         * @return mixed
         */
        public function getPort () {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function getRange ($key, $start, $end) {}

        /**
         * @return mixed
         */
        public function getReadTimeout () {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function getSet ($key, $value) {}

        /**
         * @return mixed
         */
        public function getTimeout () {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function hDel ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hExists ($key, $member) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hGet ($key, $member) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hGetAll ($key) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hIncrBy ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hIncrByFloat ($key, $member, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hKeys ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hLen ($key) {}

        /**
         * @param  $key
         * @param array $keys
         * @return mixed
         */
        public function hMget ($key, $keys) {}

        /**
         * @param  $key
         * @param array $pairs
         * @return mixed
         */
        public function hMset ($key, $pairs) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hSet ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hSetNx ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hStrLen ($key, $member) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hVals ($key) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function hscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function incr ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function incrBy ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function incrByFloat ($key, $value) {}

        /**
         * @param  $option
         * @return mixed
         */
        public function info ($option = NULL) {}

        /**
         * @return mixed
         */
        public function isConnected () {}

        /**
         * @param  $pattern
         * @return mixed
         */
        public function keys ($pattern) {}

        /**
         * @param  $key
         * @param  $position
         * @param  $pivot
         * @param  $value
         * @return mixed
         */
        public function lInsert ($key, $position, $pivot, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function lLen ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function lPop ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function lPush ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function lPushx ($key, $value) {}

        /**
         * @param  $key
         * @param  $index
         * @param  $value
         * @return mixed
         */
        public function lSet ($key, $index, $value) {}

        /**
         * @return mixed
         */
        public function lastSave () {}

        /**
         * @param  $key
         * @param  $index
         * @return mixed
         */
        public function lindex ($key, $index) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function lrange ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $count
         * @return mixed
         */
        public function lrem ($key, $value, $count) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $stop
         * @return mixed
         */
        public function ltrim ($key, $start, $stop) {}

        /**
         * @param array $keys
         * @return mixed
         */
        public function mget ($keys) {}

        /**
         * @param  $host
         * @param  $port
         * @param  $key
         * @param  $db
         * @param  $timeout
         * @param  $copy
         * @param  $replace
         * @return mixed
         */
        public function migrate ($host, $port, $key, $db, $timeout, $copy = NULL, $replace = NULL) {}

        /**
         * @param  $key
         * @param  $dbindex
         * @return mixed
         */
        public function move ($key, $dbindex) {}

        /**
         * @param array $pairs
         * @return mixed
         */
        public function mset ($pairs) {}

        /**
         * @param array $pairs
         * @return mixed
         */
        public function msetnx ($pairs) {}

        /**
         * @param  $mode
         * @return mixed
         */
        public function multi ($mode = NULL) {}

        /**
         * @param  $field
         * @param  $key
         * @return mixed
         */
        public function object ($field, $key) {}

        /**
         * @param  $host
         * @param  $port
         * @param  $timeout
         * @return mixed
         */
        public function pconnect ($host, $port = NULL, $timeout = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function persist ($key) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function pexpire ($key, $timestamp) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function pexpireAt ($key, $timestamp) {}

        /**
         * @param  $key
         * @param array $elements
         * @return mixed
         */
        public function pfadd ($key, $elements) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function pfcount ($key) {}

        /**
         * @param  $dstkey
         * @param array $keys
         * @return mixed
         */
        public function pfmerge ($dstkey, $keys) {}

        /**
         * @return mixed
         */
        public function ping () {}

        /**
         * @return mixed
         */
        public function pipeline () {}

        /**
         * @param  $key
         * @param  $expire
         * @param  $value
         * @return mixed
         */
        public function psetex ($key, $expire, $value) {}

        /**
         * @param array $patterns
         * @param  $callback
         * @return mixed
         */
        public function psubscribe ($patterns, $callback) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function pttl ($key) {}

        /**
         * @param  $channel
         * @param  $message
         * @return mixed
         */
        public function publish ($channel, $message) {}

        /**
         * @param  $cmd
         * @param  $args
         * @return mixed
         */
        public function pubsub ($cmd, $args = NULL) {}

        /**
         * @param  $pattern
         * @param  $other_patterns
         * @return mixed
         */
        public function punsubscribe ($pattern, $other_patterns = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function rPop ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function rPush ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function rPushx ($key, $value) {}

        /**
         * @return mixed
         */
        public function randomKey () {}

        /**
         * @param  $cmd
         * @param  $args
         * @return mixed
         */
        public function rawcommand ($cmd, $args = NULL) {}

        /**
         * @param  $key
         * @param  $newkey
         * @return mixed
         */
        public function rename ($key, $newkey) {}

        /**
         * @param  $key
         * @param  $newkey
         * @return mixed
         */
        public function renameNx ($key, $newkey) {}

        /**
         * @param  $ttl
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function restore ($ttl, $key, $value) {}

        /**
         * @return mixed
         */
        public function role () {}

        /**
         * @param  $src
         * @param  $dst
         * @return mixed
         */
        public function rpoplpush ($src, $dst) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function sAdd ($key, $value) {}

        /**
         * @param  $key
         * @param array $options
         * @return mixed
         */
        public function sAddArray ($key, $options) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sDiff ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sDiffStore ($dst, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sInter ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sInterStore ($dst, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function sMembers ($key) {}

        /**
         * @param  $src
         * @param  $dst
         * @param  $value
         * @return mixed
         */
        public function sMove ($src, $dst, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function sPop ($key) {}

        /**
         * @param  $key
         * @param  $count
         * @return mixed
         */
        public function sRandMember ($key, $count = NULL) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sUnion ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sUnionStore ($dst, $key, $other_keys = NULL) {}

        /**
         * @return mixed
         */
        public function save () {}

        /**
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function scan (&$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function scard ($key) {}

        /**
         * @param  $cmd
         * @param  $args
         * @return mixed
         */
        public function script ($cmd, $args = NULL) {}

        /**
         * @param  $dbindex
         * @return mixed
         */
        public function select ($dbindex) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $opts
         * @return mixed
         */
        public function set ($key, $value, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $offset
         * @param  $value
         * @return mixed
         */
        public function setBit ($key, $offset, $value) {}

        /**
         * @param  $option
         * @param  $value
         * @return mixed
         */
        public function setOption ($option, $value) {}

        /**
         * @param  $key
         * @param  $offset
         * @param  $value
         * @return mixed
         */
        public function setRange ($key, $offset, $value) {}

        /**
         * @param  $key
         * @param  $expire
         * @param  $value
         * @return mixed
         */
        public function setex ($key, $expire, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function setnx ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function sismember ($key, $value) {}

        /**
         * @param  $host
         * @param  $port
         * @return mixed
         */
        public function slaveof ($host = NULL, $port = NULL) {}

        /**
         * @param  $arg
         * @param  $option
         * @return mixed
         */
        public function slowlog ($arg, $option = NULL) {}

        /**
         * @param  $key
         * @param array $options
         * @return mixed
         */
        public function sort ($key, $options = NULL) {}

        /**
         * @param  $key
         * @param  $pattern
         * @param  $get
         * @param  $start
         * @param  $end
         * @param  $getList
         * @return mixed
         */
        public function sortAsc ($key, $pattern = NULL, $get = NULL, $start = NULL, $end = NULL, $getList = NULL) {}

        /**
         * @param  $key
         * @param  $pattern
         * @param  $get
         * @param  $start
         * @param  $end
         * @param  $getList
         * @return mixed
         */
        public function sortAscAlpha ($key, $pattern = NULL, $get = NULL, $start = NULL, $end = NULL, $getList = NULL) {}

        /**
         * @param  $key
         * @param  $pattern
         * @param  $get
         * @param  $start
         * @param  $end
         * @param  $getList
         * @return mixed
         */
        public function sortDesc ($key, $pattern = NULL, $get = NULL, $start = NULL, $end = NULL, $getList = NULL) {}

        /**
         * @param  $key
         * @param  $pattern
         * @param  $get
         * @param  $start
         * @param  $end
         * @param  $getList
         * @return mixed
         */
        public function sortDescAlpha ($key, $pattern = NULL, $get = NULL, $start = NULL, $end = NULL, $getList = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function srem ($key, $member, $other_members = NULL) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function sscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function strlen ($key) {}

        /**
         * @param array $channels
         * @param  $callback
         * @return mixed
         */
        public function subscribe ($channels, $callback) {}

        /**
         * @param  $srcdb
         * @param  $dstdb
         * @return mixed
         */
        public function swapdb ($srcdb, $dstdb) {}

        /**
         * @return mixed
         */
        public function time () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function ttl ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function type ($key) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function unlink ($key, $other_keys = NULL) {}

        /**
         * @param  $channel
         * @param  $other_channels
         * @return mixed
         */
        public function unsubscribe ($channel, $other_channels = NULL) {}

        /**
         * @return mixed
         */
        public function unwatch () {}

        /**
         * @param  $numslaves
         * @param  $timeout
         * @return mixed
         */
        public function wait ($numslaves, $timeout) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function watch ($key, $other_keys = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param array $arr_ids
         * @return mixed
         */
        public function xack ($str_key, $str_group, $arr_ids) {}

        /**
         * @param  $str_key
         * @param  $str_id
         * @param array $arr_fields
         * @param  $i_maxlen
         * @param  $boo_approximate
         * @return mixed
         */
        public function xadd ($str_key, $str_id, $arr_fields, $i_maxlen = NULL, $boo_approximate = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param  $str_consumer
         * @param  $i_min_idle
         * @param array $arr_ids
         * @param array $arr_opts
         * @return mixed
         */
        public function xclaim ($str_key, $str_group, $str_consumer, $i_min_idle, $arr_ids, $arr_opts = NULL) {}

        /**
         * @param  $str_key
         * @param array $arr_ids
         * @return mixed
         */
        public function xdel ($str_key, $arr_ids) {}

        /**
         * @param  $str_operation
         * @param  $str_key
         * @param  $str_arg1
         * @param  $str_arg2
         * @param  $str_arg3
         * @return mixed
         */
        public function xgroup ($str_operation, $str_key = NULL, $str_arg1 = NULL, $str_arg2 = NULL, $str_arg3 = NULL) {}

        /**
         * @param  $str_cmd
         * @param  $str_key
         * @param  $str_group
         * @return mixed
         */
        public function xinfo ($str_cmd, $str_key = NULL, $str_group = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function xlen ($key) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @param  $str_consumer
         * @return mixed
         */
        public function xpending ($str_key, $str_group, $str_start = NULL, $str_end = NULL, $i_count = NULL, $str_consumer = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @return mixed
         */
        public function xrange ($str_key, $str_start, $str_end, $i_count = NULL) {}

        /**
         * @param array $arr_streams
         * @param  $i_count
         * @param  $i_block
         * @return mixed
         */
        public function xread ($arr_streams, $i_count = NULL, $i_block = NULL) {}

        /**
         * @param  $str_group
         * @param  $str_consumer
         * @param array $arr_streams
         * @param  $i_count
         * @param  $i_block
         * @return mixed
         */
        public function xreadgroup ($str_group, $str_consumer, $arr_streams, $i_count = NULL, $i_block = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @return mixed
         */
        public function xrevrange ($str_key, $str_start, $str_end, $i_count = NULL) {}

        /**
         * @param  $str_key
         * @param  $i_maxlen
         * @param  $boo_approximate
         * @return mixed
         */
        public function xtrim ($str_key, $i_maxlen, $boo_approximate = NULL) {}

        /**
         * @param  $key
         * @param  $score
         * @param  $value
         * @return mixed
         */
        public function zAdd ($key, $score, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zCard ($key) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zCount ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $member
         * @return mixed
         */
        public function zIncrBy ($key, $value, $member) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zLexCount ($key, $min, $max) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zPopMax ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zPopMin ($key) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param  $scores
         * @return mixed
         */
        public function zRange ($key, $start, $end, $scores = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @param  $offset
         * @param  $limit
         * @return mixed
         */
        public function zRangeByLex ($key, $min, $max, $offset = NULL, $limit = NULL) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param array $options
         * @return mixed
         */
        public function zRangeByScore ($key, $start, $end, $options = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zRank ($key, $member) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function zRem ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zRemRangeByLex ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function zRemRangeByRank ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zRemRangeByScore ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param  $scores
         * @return mixed
         */
        public function zRevRange ($key, $start, $end, $scores = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @param  $offset
         * @param  $limit
         * @return mixed
         */
        public function zRevRangeByLex ($key, $min, $max, $offset = NULL, $limit = NULL) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param array $options
         * @return mixed
         */
        public function zRevRangeByScore ($key, $start, $end, $options = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zRevRank ($key, $member) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zScore ($key, $member) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zinterstore ($key, $keys, $weights = NULL, $aggregate = NULL) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function zscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zunionstore ($key, $keys, $weights = NULL, $aggregate = NULL) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function delete ($key, $other_keys = NULL) {}

        /**
         * @param  $script
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function evaluate ($script, $args = NULL, $num_keys = NULL) {}

        /**
         * @param  $script_sha
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function evaluateSha ($script_sha, $args = NULL, $num_keys = NULL) {}

        /**
         * @param  $pattern
         * @return mixed
         */
        public function getKeys ($pattern) {}

        /**
         * @param array $keys
         * @return mixed
         */
        public function getMultiple ($keys) {}

        /**
         * @param  $key
         * @param  $index
         * @return mixed
         */
        public function lGet ($key, $index) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function lGetRange ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $count
         * @return mixed
         */
        public function lRemove ($key, $value, $count) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function lSize ($key) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $stop
         * @return mixed
         */
        public function listTrim ($key, $start, $stop) {}

        /**
         * @param  $host
         * @param  $port
         * @param  $timeout
         * @param  $retry_interval
         * @return mixed
         */
        public function open ($host, $port = NULL, $timeout = NULL, $retry_interval = NULL) {}

        /**
         * @param  $host
         * @param  $port
         * @param  $timeout
         * @return mixed
         */
        public function popen ($host, $port = NULL, $timeout = NULL) {}

        /**
         * @param  $key
         * @param  $newkey
         * @return mixed
         */
        public function renameKey ($key, $newkey) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function sContains ($key, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function sGetMembers ($key) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function sRemove ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function sSize ($key) {}

        /**
         * @param  $msg
         * @return mixed
         */
        public function sendEcho ($msg) {}

        /**
         * @param  $key
         * @param  $timeout
         * @return mixed
         */
        public function setTimeout ($key, $timeout) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function substr ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function zDelete ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zDeleteRangeByRank ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zDeleteRangeByScore ($key, $min, $max) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zInter ($key, $keys, $weights = NULL, $aggregate = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function zRemove ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zRemoveRangeByScore ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param  $scores
         * @return mixed
         */
        public function zReverseRange ($key, $start, $end, $scores = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zSize ($key) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zUnion ($key, $keys, $weights = NULL, $aggregate = NULL) {}

    }
}

namespace  {
    class RedisArray {

        /**
         * @param  $function_name
         * @param  $arguments
         * @return mixed
         */
        public function __call ($function_name, $arguments) {}

        /**
         * @param  $name_or_hosts
         * @param array $options
         * @return mixed
         */
        public function __construct ($name_or_hosts, $options = NULL) {}

        /**
         * @return mixed
         */
        public function _continuum () {}

        /**
         * @return mixed
         */
        public function _distributor () {}

        /**
         * @return mixed
         */
        public function _function () {}

        /**
         * @return mixed
         */
        public function _hosts () {}

        /**
         * @param  $host
         * @return mixed
         */
        public function _instance ($host) {}

        /**
         * @param  $callable
         * @return mixed
         */
        public function _rehash ($callable = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function _target ($key) {}

        /**
         * @return mixed
         */
        public function bgsave () {}

        /**
         * @param  $keys
         * @return mixed
         */
        public function del ($keys) {}

        /**
         * @return mixed
         */
        public function discard () {}

        /**
         * @return mixed
         */
        public function exec () {}

        /**
         * @param  $async
         * @return mixed
         */
        public function flushall ($async = NULL) {}

        /**
         * @param  $async
         * @return mixed
         */
        public function flushdb ($async = NULL) {}

        /**
         * @param  $opt
         * @return mixed
         */
        public function getOption ($opt) {}

        /**
         * @return mixed
         */
        public function info () {}

        /**
         * @param  $pattern
         * @return mixed
         */
        public function keys ($pattern) {}

        /**
         * @param  $keys
         * @return mixed
         */
        public function mget ($keys) {}

        /**
         * @param  $pairs
         * @return mixed
         */
        public function mset ($pairs) {}

        /**
         * @param  $host
         * @param  $mode
         * @return mixed
         */
        public function multi ($host, $mode = NULL) {}

        /**
         * @return mixed
         */
        public function ping () {}

        /**
         * @return mixed
         */
        public function save () {}

        /**
         * @param  $index
         * @return mixed
         */
        public function select ($index) {}

        /**
         * @param  $opt
         * @param  $value
         * @return mixed
         */
        public function setOption ($opt, $value) {}

        /**
         * @return mixed
         */
        public function unlink () {}

        /**
         * @return mixed
         */
        public function unwatch () {}

        /**
         * @param  $keys
         * @return mixed
         */
        public function delete ($keys) {}

        /**
         * @param  $keys
         * @return mixed
         */
        public function getMultiple ($keys) {}

    }
}

namespace  {
    class RedisCluster {
        const REDIS_NOT_FOUND = 0;
        const REDIS_STRING = 1;
        const REDIS_SET = 2;
        const REDIS_LIST = 3;
        const REDIS_ZSET = 4;
        const REDIS_HASH = 5;
        const REDIS_STREAM = 6;
        const ATOMIC = 0;
        const MULTI = 1;
        const OPT_SERIALIZER = 1;
        const OPT_PREFIX = 2;
        const OPT_READ_TIMEOUT = 3;
        const OPT_TCP_KEEPALIVE = 6;
        const OPT_COMPRESSION = 7;
        const OPT_REPLY_LITERAL = 8;
        const OPT_COMPRESSION_LEVEL = 9;
        const SERIALIZER_NONE = 0;
        const SERIALIZER_PHP = 1;
        const SERIALIZER_IGBINARY = 2;
        const SERIALIZER_JSON = 4;
        const COMPRESSION_NONE = 0;
        const OPT_SCAN = 4;
        const SCAN_RETRY = 1;
        const SCAN_NORETRY = 0;
        const OPT_SLAVE_FAILOVER = 5;
        const FAILOVER_NONE = 0;
        const FAILOVER_ERROR = 1;
        const FAILOVER_DISTRIBUTE = 2;
        const FAILOVER_DISTRIBUTE_SLAVES = 3;
        const AFTER = 'after';
        const BEFORE = 'before';

        /**
         * @param  $name
         * @param array $seeds
         * @param  $timeout
         * @param  $read_timeout
         * @param  $persistent
         * @param  $auth
         * @return mixed
         */
        public function __construct ($name, $seeds = NULL, $timeout = NULL, $read_timeout = NULL, $persistent = NULL, $auth = NULL) {}

        /**
         * @return mixed
         */
        public function _masters () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function _prefix ($key) {}

        /**
         * @return mixed
         */
        public function _redir () {}

        /**
         * @param  $value
         * @return mixed
         */
        public function _serialize ($value) {}

        /**
         * @param  $value
         * @return mixed
         */
        public function _unserialize ($value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function append ($key, $value) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function bgrewriteaof ($key_or_address) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function bgsave ($key_or_address) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function bitcount ($key) {}

        /**
         * @param  $operation
         * @param  $ret_key
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function bitop ($operation, $ret_key, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $bit
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function bitpos ($key, $bit, $start = NULL, $end = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function blpop ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function brpop ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $src
         * @param  $dst
         * @param  $timeout
         * @return mixed
         */
        public function brpoplpush ($src, $dst, $timeout) {}

        /**
         * @return mixed
         */
        public function clearlasterror () {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function bzpopmax ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $key
         * @param  $timeout_or_key
         * @param  $extra_args
         * @return mixed
         */
        public function bzpopmin ($key, $timeout_or_key, $extra_args = NULL) {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function client ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @return mixed
         */
        public function close () {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function cluster ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @param  $args
         * @return mixed
         */
        public function command ($args = NULL) {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function config ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function dbsize ($key_or_address) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function decr ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function decrby ($key, $value) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function del ($key, $other_keys = NULL) {}

        /**
         * @return mixed
         */
        public function discard () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function dump ($key) {}

        /**
         * @param  $msg
         * @return mixed
         */
        public function echo ($msg) {}

        /**
         * @param  $script
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function eval ($script, $args = NULL, $num_keys = NULL) {}

        /**
         * @param  $script_sha
         * @param  $args
         * @param  $num_keys
         * @return mixed
         */
        public function evalsha ($script_sha, $args = NULL, $num_keys = NULL) {}

        /**
         * @return mixed
         */
        public function exec () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function exists ($key) {}

        /**
         * @param  $key
         * @param  $timeout
         * @return mixed
         */
        public function expire ($key, $timeout) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function expireat ($key, $timestamp) {}

        /**
         * @param  $key_or_address
         * @param  $async
         * @return mixed
         */
        public function flushall ($key_or_address, $async = NULL) {}

        /**
         * @param  $key_or_address
         * @param  $async
         * @return mixed
         */
        public function flushdb ($key_or_address, $async = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lat
         * @param  $member
         * @param  $other_triples
         * @return mixed
         */
        public function geoadd ($key, $lng, $lat, $member, $other_triples = NULL) {}

        /**
         * @param  $key
         * @param  $src
         * @param  $dst
         * @param  $unit
         * @return mixed
         */
        public function geodist ($key, $src, $dst, $unit = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function geohash ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function geopos ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lan
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadius ($key, $lng, $lan, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $lng
         * @param  $lan
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadius_ro ($key, $lng, $lan, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadiusbymember ($key, $member, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $radius
         * @param  $unit
         * @param array $opts
         * @return mixed
         */
        public function georadiusbymember_ro ($key, $member, $radius, $unit, $opts = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function get ($key) {}

        /**
         * @param  $key
         * @param  $offset
         * @return mixed
         */
        public function getbit ($key, $offset) {}

        /**
         * @return mixed
         */
        public function getlasterror () {}

        /**
         * @return mixed
         */
        public function getmode () {}

        /**
         * @param  $option
         * @return mixed
         */
        public function getoption ($option) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function getrange ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function getset ($key, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function hdel ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hexists ($key, $member) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hget ($key, $member) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hgetall ($key) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hincrby ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hincrbyfloat ($key, $member, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hkeys ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hlen ($key) {}

        /**
         * @param  $key
         * @param array $keys
         * @return mixed
         */
        public function hmget ($key, $keys) {}

        /**
         * @param  $key
         * @param array $pairs
         * @return mixed
         */
        public function hmset ($key, $pairs) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function hscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hset ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $value
         * @return mixed
         */
        public function hsetnx ($key, $member, $value) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function hstrlen ($key, $member) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function hvals ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function incr ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function incrby ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function incrbyfloat ($key, $value) {}

        /**
         * @param  $key_or_address
         * @param  $option
         * @return mixed
         */
        public function info ($key_or_address, $option = NULL) {}

        /**
         * @param  $pattern
         * @return mixed
         */
        public function keys ($pattern) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function lastsave ($key_or_address) {}

        /**
         * @param  $key
         * @param  $index
         * @return mixed
         */
        public function lget ($key, $index) {}

        /**
         * @param  $key
         * @param  $index
         * @return mixed
         */
        public function lindex ($key, $index) {}

        /**
         * @param  $key
         * @param  $position
         * @param  $pivot
         * @param  $value
         * @return mixed
         */
        public function linsert ($key, $position, $pivot, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function llen ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function lpop ($key) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function lpush ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function lpushx ($key, $value) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @return mixed
         */
        public function lrange ($key, $start, $end) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function lrem ($key, $value) {}

        /**
         * @param  $key
         * @param  $index
         * @param  $value
         * @return mixed
         */
        public function lset ($key, $index, $value) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $stop
         * @return mixed
         */
        public function ltrim ($key, $start, $stop) {}

        /**
         * @param array $keys
         * @return mixed
         */
        public function mget ($keys) {}

        /**
         * @param array $pairs
         * @return mixed
         */
        public function mset ($pairs) {}

        /**
         * @param array $pairs
         * @return mixed
         */
        public function msetnx ($pairs) {}

        /**
         * @return mixed
         */
        public function multi () {}

        /**
         * @param  $field
         * @param  $key
         * @return mixed
         */
        public function object ($field, $key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function persist ($key) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function pexpire ($key, $timestamp) {}

        /**
         * @param  $key
         * @param  $timestamp
         * @return mixed
         */
        public function pexpireat ($key, $timestamp) {}

        /**
         * @param  $key
         * @param array $elements
         * @return mixed
         */
        public function pfadd ($key, $elements) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function pfcount ($key) {}

        /**
         * @param  $dstkey
         * @param array $keys
         * @return mixed
         */
        public function pfmerge ($dstkey, $keys) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function ping ($key_or_address) {}

        /**
         * @param  $key
         * @param  $expire
         * @param  $value
         * @return mixed
         */
        public function psetex ($key, $expire, $value) {}

        /**
         * @param array $patterns
         * @param  $callback
         * @return mixed
         */
        public function psubscribe ($patterns, $callback) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function pttl ($key) {}

        /**
         * @param  $channel
         * @param  $message
         * @return mixed
         */
        public function publish ($channel, $message) {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function pubsub ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @param  $pattern
         * @param  $other_patterns
         * @return mixed
         */
        public function punsubscribe ($pattern, $other_patterns = NULL) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function randomkey ($key_or_address) {}

        /**
         * @param  $cmd
         * @param  $args
         * @return mixed
         */
        public function rawcommand ($cmd, $args = NULL) {}

        /**
         * @param  $key
         * @param  $newkey
         * @return mixed
         */
        public function rename ($key, $newkey) {}

        /**
         * @param  $key
         * @param  $newkey
         * @return mixed
         */
        public function renamenx ($key, $newkey) {}

        /**
         * @param  $ttl
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function restore ($ttl, $key, $value) {}

        /**
         * @return mixed
         */
        public function role () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function rpop ($key) {}

        /**
         * @param  $src
         * @param  $dst
         * @return mixed
         */
        public function rpoplpush ($src, $dst) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function rpush ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function rpushx ($key, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function sadd ($key, $value) {}

        /**
         * @param  $key
         * @param array $options
         * @return mixed
         */
        public function saddarray ($key, $options) {}

        /**
         * @param  $key_or_address
         * @return mixed
         */
        public function save ($key_or_address) {}

        /**
         * @param  $i_iterator
         * @param  $str_node
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function scan (&$i_iterator, $str_node, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function scard ($key) {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function script ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sdiff ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sdiffstore ($dst, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $opts
         * @return mixed
         */
        public function set ($key, $value, $opts = NULL) {}

        /**
         * @param  $key
         * @param  $offset
         * @param  $value
         * @return mixed
         */
        public function setbit ($key, $offset, $value) {}

        /**
         * @param  $key
         * @param  $expire
         * @param  $value
         * @return mixed
         */
        public function setex ($key, $expire, $value) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function setnx ($key, $value) {}

        /**
         * @param  $option
         * @param  $value
         * @return mixed
         */
        public function setoption ($option, $value) {}

        /**
         * @param  $key
         * @param  $offset
         * @param  $value
         * @return mixed
         */
        public function setrange ($key, $offset, $value) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sinter ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sinterstore ($dst, $key, $other_keys = NULL) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function sismember ($key, $value) {}

        /**
         * @param  $key_or_address
         * @param  $arg
         * @param  $other_args
         * @return mixed
         */
        public function slowlog ($key_or_address, $arg = NULL, $other_args = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function smembers ($key) {}

        /**
         * @param  $src
         * @param  $dst
         * @param  $value
         * @return mixed
         */
        public function smove ($src, $dst, $value) {}

        /**
         * @param  $key
         * @param array $options
         * @return mixed
         */
        public function sort ($key, $options = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function spop ($key) {}

        /**
         * @param  $key
         * @param  $count
         * @return mixed
         */
        public function srandmember ($key, $count = NULL) {}

        /**
         * @param  $key
         * @param  $value
         * @return mixed
         */
        public function srem ($key, $value) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function sscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function strlen ($key) {}

        /**
         * @param array $channels
         * @param  $callback
         * @return mixed
         */
        public function subscribe ($channels, $callback) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sunion ($key, $other_keys = NULL) {}

        /**
         * @param  $dst
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function sunionstore ($dst, $key, $other_keys = NULL) {}

        /**
         * @return mixed
         */
        public function time () {}

        /**
         * @param  $key
         * @return mixed
         */
        public function ttl ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function type ($key) {}

        /**
         * @param  $channel
         * @param  $other_channels
         * @return mixed
         */
        public function unsubscribe ($channel, $other_channels = NULL) {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function unlink ($key, $other_keys = NULL) {}

        /**
         * @return mixed
         */
        public function unwatch () {}

        /**
         * @param  $key
         * @param  $other_keys
         * @return mixed
         */
        public function watch ($key, $other_keys = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param array $arr_ids
         * @return mixed
         */
        public function xack ($str_key, $str_group, $arr_ids) {}

        /**
         * @param  $str_key
         * @param  $str_id
         * @param array $arr_fields
         * @param  $i_maxlen
         * @param  $boo_approximate
         * @return mixed
         */
        public function xadd ($str_key, $str_id, $arr_fields, $i_maxlen = NULL, $boo_approximate = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param  $str_consumer
         * @param  $i_min_idle
         * @param array $arr_ids
         * @param array $arr_opts
         * @return mixed
         */
        public function xclaim ($str_key, $str_group, $str_consumer, $i_min_idle, $arr_ids, $arr_opts = NULL) {}

        /**
         * @param  $str_key
         * @param array $arr_ids
         * @return mixed
         */
        public function xdel ($str_key, $arr_ids) {}

        /**
         * @param  $str_operation
         * @param  $str_key
         * @param  $str_arg1
         * @param  $str_arg2
         * @param  $str_arg3
         * @return mixed
         */
        public function xgroup ($str_operation, $str_key = NULL, $str_arg1 = NULL, $str_arg2 = NULL, $str_arg3 = NULL) {}

        /**
         * @param  $str_cmd
         * @param  $str_key
         * @param  $str_group
         * @return mixed
         */
        public function xinfo ($str_cmd, $str_key = NULL, $str_group = NULL) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function xlen ($key) {}

        /**
         * @param  $str_key
         * @param  $str_group
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @param  $str_consumer
         * @return mixed
         */
        public function xpending ($str_key, $str_group, $str_start = NULL, $str_end = NULL, $i_count = NULL, $str_consumer = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @return mixed
         */
        public function xrange ($str_key, $str_start, $str_end, $i_count = NULL) {}

        /**
         * @param array $arr_streams
         * @param  $i_count
         * @param  $i_block
         * @return mixed
         */
        public function xread ($arr_streams, $i_count = NULL, $i_block = NULL) {}

        /**
         * @param  $str_group
         * @param  $str_consumer
         * @param array $arr_streams
         * @param  $i_count
         * @param  $i_block
         * @return mixed
         */
        public function xreadgroup ($str_group, $str_consumer, $arr_streams, $i_count = NULL, $i_block = NULL) {}

        /**
         * @param  $str_key
         * @param  $str_start
         * @param  $str_end
         * @param  $i_count
         * @return mixed
         */
        public function xrevrange ($str_key, $str_start, $str_end, $i_count = NULL) {}

        /**
         * @param  $str_key
         * @param  $i_maxlen
         * @param  $boo_approximate
         * @return mixed
         */
        public function xtrim ($str_key, $i_maxlen, $boo_approximate = NULL) {}

        /**
         * @param  $key
         * @param  $score
         * @param  $value
         * @return mixed
         */
        public function zadd ($key, $score, $value) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zcard ($key) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zcount ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $value
         * @param  $member
         * @return mixed
         */
        public function zincrby ($key, $value, $member) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zinterstore ($key, $keys, $weights = NULL, $aggregate = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zlexcount ($key, $min, $max) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zpopmax ($key) {}

        /**
         * @param  $key
         * @return mixed
         */
        public function zpopmin ($key) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param  $scores
         * @return mixed
         */
        public function zrange ($key, $start, $end, $scores = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @param  $offset
         * @param  $limit
         * @return mixed
         */
        public function zrangebylex ($key, $min, $max, $offset = NULL, $limit = NULL) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param array $options
         * @return mixed
         */
        public function zrangebyscore ($key, $start, $end, $options = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zrank ($key, $member) {}

        /**
         * @param  $key
         * @param  $member
         * @param  $other_members
         * @return mixed
         */
        public function zrem ($key, $member, $other_members = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zremrangebylex ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zremrangebyrank ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @return mixed
         */
        public function zremrangebyscore ($key, $min, $max) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param  $scores
         * @return mixed
         */
        public function zrevrange ($key, $start, $end, $scores = NULL) {}

        /**
         * @param  $key
         * @param  $min
         * @param  $max
         * @param  $offset
         * @param  $limit
         * @return mixed
         */
        public function zrevrangebylex ($key, $min, $max, $offset = NULL, $limit = NULL) {}

        /**
         * @param  $key
         * @param  $start
         * @param  $end
         * @param array $options
         * @return mixed
         */
        public function zrevrangebyscore ($key, $start, $end, $options = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zrevrank ($key, $member) {}

        /**
         * @param  $str_key
         * @param  $i_iterator
         * @param  $str_pattern
         * @param  $i_count
         * @return mixed
         */
        public function zscan ($str_key, &$i_iterator, $str_pattern = NULL, $i_count = NULL) {}

        /**
         * @param  $key
         * @param  $member
         * @return mixed
         */
        public function zscore ($key, $member) {}

        /**
         * @param  $key
         * @param array $keys
         * @param array $weights
         * @param  $aggregate
         * @return mixed
         */
        public function zunionstore ($key, $keys, $weights = NULL, $aggregate = NULL) {}

    }
}

namespace  {
    class RedisException extends \Exception {

        protected $message;
        protected $code;
        protected $file;
        protected $line;

        /**
         * @param  $message
         * @param  $code
         * @param  $previous
         * @return mixed
         */
        public function __construct ($message = NULL, $code = NULL, $previous = NULL) {parent::__construct();}

        /**
         * @return mixed
         */
        public function __wakeup () {}

        /**
         * @return mixed
         */
        public function __toString () {return "";}

    }
}

namespace  {
    class RedisClusterException extends \Exception {

        protected $message;
        protected $code;
        protected $file;
        protected $line;

        /**
         * @param  $message
         * @param  $code
         * @param  $previous
         * @return mixed
         */
        public function __construct ($message = NULL, $code = NULL, $previous = NULL) {parent::__construct();}

        /**
         * @return mixed
         */
        public function __wakeup () {}

        /**
         * @return mixed
         */
        public function __toString () {return "";}

    }
}



